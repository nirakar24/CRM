from django.http import JsonResponse
import pandas as pd
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

# Sample Data
data = {
    'CustomerID': [1, 2, 3, 4, 5],
    'Age': [25, 45, 35, 50, 23],
    'Tenure': [3, 5, 7, 9, 1],
    'MonthlyCharges': [70, 120, 80, 150, 60],
    'Churn': [0, 1, 0, 1, 0]  # 0 = Not churned, 1 = Churned
}
df = pd.DataFrame(data)

# Features and Target Variable
X = df[['Age', 'Tenure', 'MonthlyCharges']]  # Features
y = df['Churn']  # Target variable

# Split Data into Training and Test Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression Model
model = LogisticRegression()
model.fit(X_train, y_train)

# Prediction on Test Set
predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)

# Convert NumPy int64 to Python int
accuracy = float(accuracy)

# New Churn Calculation Function
def calculate_churn(customer_data):
    """
    This function takes customer data and returns churn prediction.
    :param customer_data: Dictionary with customer features (Age, Tenure, MonthlyCharges)
    :return: Churn Prediction (0 = Not churned, 1 = Churned)
    """
    customer_df = pd.DataFrame([customer_data])
    churn_prediction = model.predict(customer_df)
    return int(churn_prediction[0])  # Convert NumPy int64 to Python int

# Churn Prediction API
def churn_prediction(request):
    # Example Customer Data
    customer_data = {
        'Age': 40,
        'Tenure': 6,
        'MonthlyCharges': 90
    }

    churn_result = calculate_churn(customer_data)

    return JsonResponse({
        'customer_data': customer_data,
        'churn_prediction': churn_result,
        'accuracy': accuracy
    })


# Sales Forecasting API
def sales_forecasting(request):
    # Sample sales data
    data = {
        'Month': ['January', 'February', 'March', 'April', 'May'],
        'Sales': [10000, 15000, 13000, 17000, 16000]
    }
    df = pd.DataFrame(data)

    # Feature and target variable
    X = np.array(range(len(df))).reshape(-1, 1)  # Time as a feature (e.g., months)
    y = df['Sales']

    # Linear Regression Model for forecasting
    model = LinearRegression()
    model.fit(X, y)

    # Predict future sales (next 3 months)
    future_months = np.array([[5], [6], [7]])
    future_sales = model.predict(future_months)

    # Return results as JSON
    return JsonResponse({
        'predicted_sales': future_sales.tolist(),
        'months': ['June', 'July', 'August']
    })

# CLV Calculation API
def calculate_clv(request):
    # Sample data (usually retrieved from database)
    data = {
        'CustomerID': [1, 2, 3, 4, 5],
        'TotalRevenue': [1000, 1500, 1200, 2000, 900],  # Revenue generated by each customer
        'NumPurchases': [10, 15, 12, 20, 9],  # Number of purchases made by each customer
        'CustomerLifespan': [12, 18, 14, 24, 10],  # Lifespan in months
        'ChurnRate': [0.1, 0.15, 0.12, 0.08, 0.2]  # Churn rate (0-1 scale)
    }
    df = pd.DataFrame(data)

    # Calculate Average Purchase Value
    df['AvgPurchaseValue'] = df['TotalRevenue'] / df['NumPurchases']

    # Calculate CLV using the formula
    df['CLV'] = (df['AvgPurchaseValue'] * df['NumPurchases'] * df['CustomerLifespan']) / df['ChurnRate']

    # Return CLV values as JSON
    return JsonResponse({
        'clv_values': df[['CustomerID', 'CLV']].to_dict(orient='records')
    })

# backend/your_app/views.py

def dashboard_metrics(request):
    metrics = {
        'total_sales': 50000,
        'churn_rate': 15,
        'average_clv': 500,
        'sales_data': [12000, 13000, 11000, 14000],  # Sales per quarter
        'clv_data': [450, 460, 470, 480, 490, 500],  # CLV over 6 months
    }
    return JsonResponse(metrics)

# Product Recommendations API
def product_recommendations(request):
    # Sample product data
    data = {
        'ProductID': [101, 102, 103, 104, 105],
        'ProductName': ['Phone', 'Laptop', 'Tablet', 'Headphones', 'Smartwatch'],
        'Category': ['Electronics', 'Electronics', 'Electronics', 'Accessories', 'Electronics'],
        'Price': [699, 999, 399, 199, 299],
        'Rating': [4.5, 4.8, 4.2, 4.3, 4.7]
    }
    df = pd.DataFrame(data)

    # Mock recommendation logic (e.g., return top-rated products)
    recommended_products = df[df['Rating'] >= 4.5]

    # Return product recommendations as JSON
    return JsonResponse({
        'recommended_products': recommended_products.to_dict(orient='records')
    })
